apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.2"
}

/*
 * Copyright 2018 L.D'Abreo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Exclude from coverage
def fileFilter = ['com/au/planningalerts/MainActivity*.*',
                  'com/au/planningalerts/qr/**/*.*',
                  'com/au/planningalerts/ui/*.*',
                  '**/R*.class',
                  '**/BuildConfig.*',
                  '**/Manifest*.*',
                  '**/*Test*.*',
                  'android/**/*.*',
                  'com/google/**/*.*',
                  'net/bytebuddy.agent/**/*.*',
                  'org/gradle/**/*.*',
                  'org/junit/**/*.*',
                  'org/mockito/**/*.*',
                  'sun/jvmstat/**/*.*'
]
def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
def mainSrc = "${project.projectDir}/src/main/java"

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate coverage Reports"
    reports {
        xml.enabled true
        csv.enabled true
    }
    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}

task jacocoCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")


    violationRules {
        setFailOnViolation(true)

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'BRANCH'
                minimum = 0.1
            }
        }

        rule {
            element = 'PACKAGE'

            limit {
                value = 'COVEREDRATIO'
                counter = 'INSTRUCTION'
                minimum = 0.1
            }
        }
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.au.planningalerts"
        minSdkVersion 26
        targetSdkVersion 28
        versionCode 28
        versionName "28.0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {

        def google_key = google_google_maps_key  ? google_google_maps_key: System.getenv('google_google_maps_key');
        def oaf_key =oaf_planningalerts_key ? oaf_planningalerts_key: System.getenv('oaf_planningalerts_key');
        debug {
            resValue 'string', "google_maps_key", google_google_maps_key
            buildConfigField 'String', "google_maps_key", google_key
            buildConfigField 'String', "planningalerts_key", oaf_key
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue 'string', "google_maps_key", google_key
            buildConfigField 'String', "google_maps_key", google_key
            buildConfigField 'String', "planningalerts_key", oaf_key

        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }


    lintOptions {
        disable 'UnusedResources','IconNoDpi','IconDuplicates','GoogleAppIndexingWarning'
    }


}

dependencies {

    implementation 'com.android.support:multidex:1.0.3'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:mediarouter-v7:28.0.0'

    implementation 'com.android.support:animated-vector-drawable:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.google.android.gms:play-services-location:16.0.0'
    implementation 'com.google.android.gms:play-services-maps:16.0.0'
    implementation 'com.google.android.gms:play-services-vision:17.0.2'
    implementation 'com.google.android.gms:play-services-places:16.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'com.google.truth:truth:0.42'
    testImplementation 'org.json:json:20180813'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation 'junit:junit:4.12'




}
